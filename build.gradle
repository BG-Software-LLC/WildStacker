plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

group 'WildStacker'
version = "3.6.0"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/nms/' }
        maven { url 'https://repo.bg-software.com/repository/common/' }
    }

    dependencies {
        compileOnly 'com.bgsoftware.common.reflection:ReflectionUtils:latest'
    }

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = file("../archive/")
    }

    build {
        dependsOn shadowJar
    }
}

repositories {
    maven { url 'https://repo.bg-software.com/repository/nms/' }
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.bg-software.com/repository/common/' }
    maven { url 'https://repo.bg-software.com/repository/public-libs/' }

    String mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : System.getenv('mavenUsername');
    String mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : System.getenv('mavenPassword');

    if(mavenUsername != null && mavenPassword != null) {
        maven {
            url 'https://repo.bg-software.com/repository/private-libs/'
            credentials {
                username mavenUsername
                password mavenPassword
            }
        }
    }

}

dependencies {
    implementation project(":API")
    implementation fileTree("archive")

    implementation 'com.bgsoftware.common.config:CommentedConfiguration:latest'
    implementation 'com.bgsoftware.common.reflection:ReflectionUtils:latest'

    // Spigot jars
    compileOnly "org.spigotmc:v1_8_R3-Taco:latest"
    compileOnly 'org.spigotmc:v1_16_R3-Tuinity:latest'
    compileOnly 'org.spigotmc:v1_17_R1:latest'

    // Plugin hooks
    compileOnly 'org.mineacademy:Boss:latest'
    compileOnly 'org.mineacademy:Boss-3.9.7:latest'
    compileOnly 'net.citizensnpcs:Citizens:latest'
    compileOnly 'me.minebuilders:Clearlag:latest'
    compileOnly 'net.coreprotect:CoreProtect-6:latest'
    compileOnly 'me.badbones69:CrazyEnchantments:latest'
    compileOnly 'net.aminecraftdev:CustomBosses:latest'
    compileOnly 'com.dsh105:EchoPet:latest'
    compileOnly 'com.songoda:EpicBosses:latest'
    compileOnly 'com.songoda:EpicSpawners-7:latest'
    compileOnly 'com.songoda:FabledSkyblock:latest'
    compileOnly 'com.massivecraft:Factions:latest'
    compileOnly 'com.drtshock:FactionsUUID:latest'
    compileOnly 'com.boydti:FastAsyncWorldEdit:latest'
    compileOnly 'de.tr7zw:ItemNBTAPI:latest'
    compileOnly 'com.massivecraft:MassiveCore:latest'
    compileOnly 'com.nossr50:mcMMO-2:latest'
    compileOnly 'com.nossr50:mcMMO-1:latest'
    compileOnly 'com.dnyferguson:MineableSpawners:latest'
    compileOnly 'de.keyle:MyPet:latest'
    compileOnly 'io.lumine:MythicMobs:latest'
    compileOnly 'net.novucs:FactionsTop:latest'
    compileOnly 'com.github.intellectualsites:PlotSquared-4:latest'
    compileOnly 'com.github.intellectualsites:PlotSquared-5:latest'
    compileOnly 'com.github.intellectualsites:PlotSquared-Legacy:latest'
    compileOnly 'com.comphenix:ProtocolLib:latest'
    compileOnly 'net.brcdev:ShopGUIPlus-1.18:latest'
    compileOnly 'net.brcdev:ShopGUIPlus-1.20:latest'
    compileOnly 'de.dustplanet:SilkSpawners:latest'
    compileOnly 'com.bgsoftware:SuperiorSkyblockAPI:latest'
    compileOnly 'net.milkbowl:Vault:latest'
    compileOnly 'com.ome_r:WildStacker-EnchantsPatch:latest'
    compileOnly 'com.bgsoftware:WildToolsAPI:latest'
    compileOnly 'com.sk89q:WorldEdit-7:latest'
    compileOnly 'com.sk89q:WorldGuard-7:latest'
    compileOnly 'net.splodgebox:EliteBosses:latest'
    compileOnly 'me.jet315:JetsMinions:latest'
    compileOnly 'me.mrcookieslime:Slimefun4-Dev:latest'
    compileOnly 'me.derpy:MoreBosses:latest'
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen {false}
    String versionNumber = System.getenv("BUILD_NUMBER") == null ? version : version + "-DEVb" + System.getenv("BUILD_NUMBER")
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { String line ->
                line.replace('${project.version}', versionNumber)
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    if(System.getenv("BUILD_NUMBER") == null){
        archiveName = rootProject.name + ".jar"
    }
    else{
        archiveName = rootProject.name + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

task copyAPI(type: Copy) {
    from './archive/API.jar'
    into './target/'
    rename('API.jar', rootProject.name + 'API.jar')
}

clean {
    delete file('./archive/')
}

build {
    dependsOn shadowJar
    dependsOn copyAPI
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build

compileJava.options.encoding = 'UTF-8'